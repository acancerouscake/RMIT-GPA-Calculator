{"version":3,"sources":["components/Form.js","components/Results.js","components/Popup.js","rmit_logo_blue.svg","App.js","reportWebVitals.js","index.js"],"names":["Form","onSubmit","className","e","preventDefault","submittedTexts","Array","from","target","children","forEach","input","name","parseFloat","value","reset","for","type","required","min","max","defaultValue","Results","gpaData","close","show","Object","keys","length","credits","totalCourses","totalGradePoint","totalHDs","totalDIs","totalCRs","totalPAs","finalGPA","Math","round","style","transform","opacity","animationData","confetti","onClick","Popup","props","timedPopup","App","useState","latestInputText","setInputText","showResults","setShowResults","setTimedPopup","closePopupHandler","useEffect","setTimeout","src","logo","alt","education","submittedInputText","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oPAgGeA,EA7FF,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAeZ,OAEI,sBAAKC,UAAU,WAAf,UAEE,4CAAc,2CAAd,2BAA4D,4CAA5D,wEAC6B,2CAD7B,IAEA,uBAFA,IAEU,uBAFV,qBAGkB,0CAHlB,2DAME,uBAAMD,SAxBQ,SAACE,GACnBA,EAAEC,iBAEF,IAAMC,EAAiB,GACvBC,MAAMC,KAAKJ,EAAEK,OAAOC,UAAUC,SAAQ,SAAAC,GAC9BA,EAAMC,OACNP,EAAeM,EAAMC,MAAQC,WAAWF,EAAMG,WAItDb,EAASI,GACTF,EAAEK,OAAOO,SAaL,UACI,uBAAOC,IAAI,eAAX,+BACA,uBACIJ,KAAK,eACLK,KAAK,SACLf,UAAU,YACVgB,UAAQ,EACRC,IAAI,IACJC,IAAI,KACJC,aAAa,OAGjB,uBAAOL,IAAI,WAAX,sCACA,uBAEIJ,KAAK,WACLK,KAAK,SACLf,UAAU,YACVgB,UAAQ,EACRC,IAAI,IACJE,aAAa,IACbD,IAAI,OAER,uBAAOJ,IAAI,WAAX,iCACA,uBACIJ,KAAK,WACLK,KAAK,SACLf,UAAU,YACVgB,UAAQ,EACRC,IAAI,IACJE,aAAa,IACbD,IAAI,OAIR,uBAAOJ,IAAI,WAAX,4BACA,uBACIJ,KAAK,WACLK,KAAK,SACLf,UAAU,YACVgB,UAAQ,EACRC,IAAI,IACJE,aAAa,IACbD,IAAI,OAGR,uBAAOJ,IAAI,WAAX,2BACA,uBACIJ,KAAK,WACLK,KAAK,SACLf,UAAU,YACVgB,UAAQ,EACRC,IAAI,IACJE,aAAa,IACbD,IAAI,OAKR,wBAAQlB,UAAU,aAAae,KAAK,SAApC,6B,uBCpDDK,EA/BC,SAAC,GAA8B,IAA5BC,EAA2B,EAA3BA,QAASC,EAAkB,EAAlBA,MAAOC,EAAW,EAAXA,KAC3B,GAAoC,IAAhCC,OAAOC,KAAKJ,GAASK,OACrB,OAAO,KAGf,IAAMC,EAAiC,GAAvBN,EAAQO,aAMlBC,GAL0B,IAArBR,EAAQS,SAAiB,EAAuB,EAAnBT,EAAQS,SAAe,KAC/B,IAArBT,EAAQU,SAAiB,EAAuB,EAAnBV,EAAQU,SAAe,KAC/B,IAArBV,EAAQW,SAAiB,EAAuB,EAAnBX,EAAQW,SAAe,KAC/B,IAArBX,EAAQY,SAAiB,EAAuB,EAAnBZ,EAAQY,SAAe,IAGzDC,EAAWC,KAAKlB,IAAIkB,KAAKC,MAAMP,EAAgBF,EAAU,IAAM,GAAI,GAEzE,OACI,qBAAK3B,UAAU,cACXqC,MAAO,CACHC,UAAWf,EAAO,kBAAoB,qBACtCgB,QAAShB,EAAO,IAAM,KAH9B,SAMI,sBAAKvB,UAAU,gBAAf,UACI,6CACA,sBAAKA,UAAU,kBAAf,UAAiC,cAAC,IAAD,CAAQwC,cAAeC,IAAxD,QACA,oCAAOP,EAAP,OACA,wBAAQlC,UAAU,YAAY0C,QAASpB,EAAvC,2BCJDqB,MAvBf,SAAeC,GACX,OACI,qBAAK5C,UAAU,QACfqC,MAAO,CACHC,UAAWM,EAAMC,WAAa,iBAAmB,oBACjDN,QAASK,EAAMC,WAAa,IAAM,KAHtC,SAKI,sBAAK7C,UAAU,cAAf,UACA,4CACA,uKAEI,uBACA,uBAHJ,oHAOI,wBAAQA,UAAU,YAAY0C,QAASE,EAAMtB,MAA7C,mBACEsB,EAAMrC,eCnBT,MAA0B,2C,OC4D1BuC,MAlDf,WACE,MAAwCC,mBAAS,IAAjD,mBAAOC,EAAP,KAAwBC,EAAxB,KACA,EAAsCF,oBAAS,GAA/C,mBAAOG,EAAP,KAAoBC,EAApB,KACA,EAAoCJ,oBAAS,GAA7C,mBAAOF,EAAP,KAAmBO,EAAnB,KAQMC,EAAoB,WACxBF,GAAe,GACfC,GAAc,IAWhB,OARAE,qBAAU,WACRC,YAAW,WACTH,GAAc,KACb,OACF,IAMD,sBAAKpD,UAAU,MAAf,UACE,mCACE,cAAC,EAAD,CAAO6C,WAAYA,EAAYO,cAAeA,EAAe9B,MAAO+B,IAEpE,qBAAKG,IAAKC,EAAMC,IAAI,iBAGtB,qBAAK1D,UAAU,YAAf,SACE,cAAC,IAAD,CAAQwC,cAAemB,MAEzB,oBAAI3D,UAAU,iBAAd,4BACA,cAAC,EAAD,CACED,SAjCkB,SAAC6D,GAEvBX,EAAaW,GACbT,GAAe,MAgCb,cAAC,EAAD,CACA9B,QAAS2B,EACTzB,KAAM2B,EAAa5B,MAAO+B,QCxCjBQ,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.ef6cd428.chunk.js","sourcesContent":["import React from \"react\";\n\n\nconst Form = ({ onSubmit }) => {\n    const submitHandler = (e) => {\n        e.preventDefault();\n       // console.log(e);\n        const submittedTexts = {};\n        Array.from(e.target.children).forEach(input => {\n            if (input.name) {\n                submittedTexts[input.name] = parseFloat(input.value);\n            }\n        }, );\n\n        onSubmit(submittedTexts);\n        e.target.reset();\n    };\n    \n    return (\n       \n        <div className=\"gpa-form\">\n\n          <p> Enter the <strong>total</strong> amounts for each, if a <strong>double</strong> course was studied (24 credit points), \n          include the course and grade <strong>twice</strong>. \n          <br></br> <br></br> \n          If you received a <strong>fail</strong> grade (NN), include it in the total courses studied.\n           </p>\n            \n            <form onSubmit={submitHandler}>\n                <label for=\"totalCourses\"> Courses Studied:</label>\n                <input \n                    name=\"totalCourses\" \n                    type=\"number\" \n                    className=\"gpa-input\"\n                    required\n                    min=\"1\"\n                    max=\"99\"\n                    defaultValue=\"24\"\n                />\n\n                <label for=\"totalHDs\"> High Distinctions (HD):</label>     \n                <input \n \n                    name=\"totalHDs\"\n                    type=\"number\" \n                    className=\"gpa-input\"\n                    required \n                    min=\"0\"\n                    defaultValue=\"0\"\n                    max=\"99\"\n                />\n                <label for=\"totalDIs\"> Distinctions (DI):</label>  \n                <input \n                    name=\"totalDIs\"\n                    type=\"number\" \n                    className=\"gpa-input\" \n                    required\n                    min=\"0\"\n                    defaultValue=\"0\"\n                    max=\"99\"\n\n                />\n\n                <label for=\"totalCRs\"> Credits (CR):</label>  \n                <input \n                    name=\"totalCRs\"\n                    type=\"number\" \n                    className=\"gpa-input\" \n                    required\n                    min=\"0\"\n                    defaultValue=\"0\"\n                    max=\"99\"\n\n                />\n                <label for=\"totalPAs\"> Passes (PA):</label>  \n                <input\n                    name=\"totalPAs\"\n                    type=\"number\" \n                    className=\"gpa-input\" \n                    required\n                    min=\"0\"\n                    defaultValue=\"0\"\n                    max=\"99\"\n\n\n                />\n                \n                <button className=\"gpa-button\" type=\"submit\"> Submit </button>\n               \n            </form>\n        </div>\n    )\n}\n\n\n\nexport default Form;","import React from \"react\";\nimport Lottie from \"lottie-react\";\nimport confetti from \"../lotties/confetti.json\";\n\nconst Results = ( {gpaData, close, show} ) => {\n        if (Object.keys(gpaData).length === 0) {\n            return null;\n        };    \n        \n    const credits = gpaData.totalCourses * 12;\n    const hd = gpaData.totalHDs === 0 ? 0 : gpaData.totalHDs * 4 * 12\n    const di = gpaData.totalDIs === 0 ? 0 : gpaData.totalDIs * 3 * 12\n    const cr = gpaData.totalCRs === 0 ? 0 : gpaData.totalCRs * 2 * 12\n    const pa = gpaData.totalPAs === 0 ? 0 : gpaData.totalPAs * 1 * 12\n\n    const totalGradePoint = hd + di + cr + pa\n    const finalGPA = Math.min(Math.round(totalGradePoint/credits * 10 ) /10, 4);\n    \n    return (   \n        <div className=\"results-gpa\" \n            style={{ \n                transform: show ? 'translateY(0vh)' : 'translateY(-100vh)', \n                opacity: show ? '1' : '0' \n            }}>  \n\n            <div className=\"inner-results\">\n                <p>Your GPA is:</p>\n                <div className=\"lottie-confetti\"><Lottie animationData={confetti} />  </div>\n                <h3>  {finalGPA} </h3>   \n                <button className=\"close-btn\" onClick={close}> Close </button>\n            </div>\n        </div>      \n    )\n};\n\nexport default Results;\n","import React from 'react'\n\nfunction Popup(props) {\n    return  (\n        <div className=\"popup\"\n        style={{ \n            transform: props.timedPopup ? 'translate(0vh)' : 'translate(-100vh)', \n            opacity: props.timedPopup ? '1' : '0'\n        }}>  \n            <div className=\"popup-inner\">\n            <h3>Attention!</h3>\n            <p> This calculator is not to be used for a perfect GPA determination. \n                Contact RMIT University for your true GPA or erroneous GPA scores.\n                <br></br>\n                <br></br>\n                Refer to the 'GPA' section via the RMIT University website \n                for guidance on how to calculate your GPA manually.\n            </p>\n                <button className=\"close-btn\" onClick={props.close}>Close</button>\n                { props.children }\n            </div>\n        </div> \n    )\n}\n\nexport default Popup\n","export default __webpack_public_path__ + \"static/media/rmit_logo_blue.78e6ab6c.svg\";","import React, { useState, useEffect } from \"react\";\nimport './App.css';\n//Importing components\nimport Form from \"./components/Form\";\nimport Results from \"./components/Results\";\nimport Popup from \"./components/Popup\";\nimport logo from './rmit_logo_blue.svg';\nimport Lottie from \"lottie-react\";\nimport education from \"./lotties/education.json\";\n\nfunction App() {\n  const [latestInputText, setInputText] = useState({});\n  const [showResults, setShowResults] = useState(false);\n  const [timedPopup, setTimedPopup] = useState(false);\n  \n  const handleInputText = (submittedInputText) => {\n   // console.log('this has been called');\n    setInputText(submittedInputText);\n    setShowResults(true);\n  };\n\n  const closePopupHandler = () => {\n    setShowResults(false);  \n    setTimedPopup(false);\n  }\n\n  useEffect(() => {\n    setTimeout(() => {\n      setTimedPopup(true);\n    }, 2000);\n  }, []);\n  \n        \n\n  return (\n    \n    <div className=\"App\">\n      <header>\n        <Popup timedPopup={timedPopup} setTimedPopup={setTimedPopup} close={closePopupHandler}>\n        </Popup>\n        <img src={logo} alt=\"rmit logo\"></img>\n      </header>\n\n      <div className=\"lottie-ed\"> \n        <Lottie animationData={education}/> \n      </div>\n      <h4 className=\"gpa_calc_title\">GPA Calculator</h4>\n      <Form\n        onSubmit={handleInputText}\n      />\n      <Results \n      gpaData={latestInputText} \n      show={showResults} close={closePopupHandler}> \n      </Results>\n     \n        \n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}